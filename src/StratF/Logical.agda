module StratF.Logical where

open import Level
open import Data.Product using (_ร_; ฮฃ; ฮฃ-syntax; โ-syntax; _,_; projโ; projโ)
open import Data.List using (List; []; _โท_; [_])
open import Data.Unit.Polymorphic.Base using (โค; tt)
open import Function using (_โ_; id; case_of_; _|>_)
open import Relation.Binary.PropositionalEquality
  using (_โก_; _โข_; refl; sym; trans; cong; congโ; subst; substโ; respโ; cong-app; icong;
        subst-โ; subst-application; subst-applicationโฒ; subst-subst-sym; subst-sym-subst; subst-subst; -- Properties
        module โก-Reasoning)
open โก-Reasoning

open import StratF.BigStep
open import StratF.ExprSubstProperties
open import StratF.ExprSubstitution
open import StratF.Expressions
open import StratF.TypeSubstProperties
open import StratF.TypeSubstPropertiesSem
open import StratF.TypeSubstitution
open import StratF.Types
open import StratF.Util.Extensionality
open import StratF.Util.PropositionalSetOmegaEquality
open import StratF.Util.SubstProperties

----------------------------------------------------------------------
--! Logical >

open import StratF.LogicalPrelim

--! MCVType
๐ฅโฆ_โง  : (T : Type ฮ l) โ (ฯ : ๐โฆ ฮ โง) โ CValue  (Tsub (ฯโ ฯ) T) โ โฆ T โง (โฆ ฯโ ฯ โง* []) โ Set l
๐โฆ_โง  : (T : Type ฮ l) โ (ฯ : ๐โฆ ฮ โง) โ CExpr   (Tsub (ฯโ ฯ) T) โ โฆ T โง (โฆ ฯโ ฯ โง* []) โ Set l

--! MCVBody
๐ฅโฆ `โ โง ฯ u z =
  โ[ n ] (exp u โก # n) โง (n โก z)
๐ฅโฆ Tโ โ Tโ โง ฯ u f =
  โ[ e ] (exp u โก ฦ e) โง
  โ w z โ ๐ฅโฆ Tโ โง ฯ w z โ ๐โฆ Tโ โง ฯ (e [ exp w ]E) (f z)
๐ฅโฆ ` ฮฑ โง ฯ v z =
  ฯโ ฯ _ ฮฑ v (subst id (subst-var-preserves ฮฑ (ฯโ ฯ) []) z)
๐ฅโฆ `โฮฑ l , T โง ฯ u F =
  โ[ e ] (exp u โก ฮ l โ e) โง
  โ Tโฒ R โ
  โ[ v ] (e [ Tโฒ ]ET โ v)
       โง ๐ฅโฆ T โง (REext ฯ (Tโฒ , R)) (subst CValue (RE-extโlift ฯ T Tโฒ R) v) (F (โฆ Tโฒ โง []))

--! MCE
๐โฆ T โง ฯ e z = โ[ v ] (e โ v) โง ๐ฅโฆ T โง ฯ v z

-- extended LR on environments

--! MCG
๐โฆ_โง : (ฮ : Ctx ฮ) (ฯ : RelEnv ฮ) โ CSub (ฯโ ฯ) ฮ โ Env ฮ ฮ (โฆ ฯโ ฯ โง* []) โ Set (levelEnv ฮ)
๐โฆ โ       โง ฯ ฯ ฮณ = โค
๐โฆ T โ ฮ   โง ฯ ฯ ฮณ = ๐ฅโฆ T โง ฯ (ฯ _ _ here) (ฮณ _ _ here) โง ๐โฆ ฮ โง ฯ (Cdrop ฯ) (Gdrop ฮณ)
๐โฆ l โ* ฮ  โง ฯ ฯ ฮณ = ๐โฆ ฮ โง (REdrop ฯ) (Cdrop-t ฯ) (Gdrop-t (ฯโ ฯ) ฮณ)

--! substSplitEqEval
subst-split-eq-โ :
  โ {Tโ Tแตฅ : Type [] l}
  โ (e : CExpr Tโ)
  โ (v : CValue Tแตฅ)
  โ (TโโกTแตฅ : Tโ โก Tแตฅ)
  โ subst CExpr TโโกTแตฅ e โ v โก e โ subst CValue (sym TโโกTแตฅ) v
subst-split-eq-โ e v refl = refl

subst-split-eq-โโ :
  โ {T Tโฒ : Type [] l}
  โ {e : CExpr T}
  โ {v : CValue T}
  โ (TโกTโฒ : T โก Tโฒ)
  โ e โ v
  โก subst CExpr TโกTโฒ e โ subst CValue TโกTโฒ v
subst-split-eq-โโ refl = refl

subst-split-[]E :
  โ {Tโ Tโโฒ : Type [] lโ} {Tโ Tโโฒ : Type [] lโ}
  โ (e : Expr [] (Tโ โ โ) Tโ) (eโฒ : CExpr Tโโฒ)
  โ (eqโ : Tโ โก Tโโฒ) (eqโ : Tโ โก Tโโฒ)
  โ subst CExpr eqโ (e [ subst CExpr (sym eqโ) eโฒ ]E) โก (substโ (ฮป Tโ Tโ โ Expr [] (Tโ โ โ) Tโ) eqโ eqโ e [ eโฒ ]E)
subst-split-[]E e eโฒ refl refl = refl

subst-split-[]Eโฒ :
  โ {Tโ Tโโฒ : Type [] lโ} {Tโ Tโโฒ : Type [] lโ}
  โ (e : Expr [] (Tโ โ โ) Tโ) (eโฒ : CExpr Tโโฒ)
  โ (eqโ : Tโโฒ โก Tโ) (eqโ : Tโ โก Tโโฒ)
  โ subst CExpr eqโ (e [ subst CExpr eqโ eโฒ ]E) โก (substโ (ฮป Tโ Tโ โ Expr [] (Tโ โ โ) Tโ) (sym eqโ) eqโ e [ eโฒ ]E)
subst-split-[]Eโฒ e eโฒ refl refl = refl

subst-split-[]Eโณ :
  โ {Tโ Tโโฒ : Type [] lโ} {Tโ Tโโฒ : Type [] lโ}
  โ (e : Expr [] (Tโ โ โ) Tโ) (eโฒ : CExpr Tโ)
  โ (eqโ : Tโ โก Tโโฒ) (eqโ : Tโ โก Tโโฒ)
  โ (substโ (ฮป Tโ Tโ โ Expr [] (Tโ โ โ) Tโ) eqโ eqโ e [ subst CExpr eqโ eโฒ ]E)
  โก subst CExpr eqโ (e [ eโฒ ]E) 
subst-split-[]Eโณ e eโฒ refl refl = refl
